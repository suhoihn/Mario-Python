#ROM
from Coin import *
from Spike import *
from Spring import *
from 와리가리 import *
from seesaw import *
from BackGround import *
import Ground
from Enemy import *
from Thwomp import *
from Pipe import *
from Cannon import *
from Block import *
from Platform import *
from Things import *
from Spiny import *
from Yoshi import *
from Galumba import *

import Globals
Globals.ScrollLimit = [[None,None],[0,85]]
Globals.LevelCount = 1
if Globals.RegisteredCPidx == -1:#CP가 안찍혔을 때
    Globals.StartPoint = (32 * 2,32 * 16)

#=======BackGround=======
for i in range(8):
    BackGround(i,theme = "Underground")
#=======Block=======
OnOffSwitch(32 * 5, 32 * 13)
OnOffSwitch(32 * 58, 32 * 4)
OnOffSwitch(32 * 58, 32 * 6)
#OnOffSwitch(32 * 58, 32 * 8)
OnOffSwitch(32 * 44, 32 * 13)
OnOffSwitch(32 * 135, 32 * 14)

OnOffBlock(32 * 12, 32 * 15,"OFF")

for i in range(3):
    OnOffBlock(32 * (44 + i), 32 * 6,"ON")
    OnOffBlock(32 * (44 + i), 32 * 8,"OFF")
    Cloud(32 * (44 + i), 32 * 11)
    Cloud(32 * (136 + i), 32 * 14)
    
for i in range(2):
    OnOffBlock(32 * (127 + i), 32 * 10,"OFF")
    
for i in range(15):
    OnOffBlock(32 * (69 + i), 32 * 3,"OFF")

for i in range(5):
    if i == 2:
        QBlock(32 * (89 + i),32 * 6, ContainmentType = "Star")
    else:
        QBlock(32 * (89 + i),32 * 6, ContainmentType = "Coin")


QBlock(32 * 8,32 * 13, ContainmentType = "Star")
QBlock(32 * 33,32 * 5, ContainmentType = "Star")
QBlock(32 * 48,32 * 13, ContainmentType = "Star")

#=======Cannon=======

#=======Coin=======
for i in range(5):
    coin(32 * (25 + i), 32 * 22)
#=======Enemy(Koopa)=======

#=======Ground=======#ln 40 start
Map ="""
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000G
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
"""
Ground.initialize(Map)

#=======Pipe======
##pipe(32 * 39, 32 * 15,-1,"UP",19)
##pipe(32 * 45, 32 * 22,-1,"DOWN",6)
##
##pipe(32 * 92, 32 * 0,2,"UP",LvTrans = True,TargetLevelIdx = 1)
##pipe(32 * 117, 32 * 21,-1,"DOWN",6)
##
##pipe(32 * 119, 32 * 22,-1,"DOWN",5)
##pipe(32 * 125, 32 * 19,-1,"UP",23)
##
##pipe(32 * 140, 32 * 16,3,"UP",20,LvTrans = True,TargetLevelIdx = 2)
##pipe(32 * 57 -16, 32 * -2,1,"UP",LvTrans = True,TargetLevelIdx = 1)

Globals.CurrentPipes = pipes

#=======Platform=======

#=======Seesaw=======

#=======Spike=======
for i in range(15):
    Spike(32 * 12,32 * i)
    Spike(32 * 88,32 * (6 - i))
    
for i in range(8):
    Spike(32 * 43,32 * (i + 9))
    Spike(32 * 68,32 * (i + 3))

for i in range(7):
    Spike(32 * 126,32 * (i + 7))
    Spike(32 * 129,32 * (i + 4))
    Spike(32 * (140 + i),32 * 14)

for i in range(13):
    Spike(32 * 84,32 * (i + 3))
    Spike(32 * (i + 122),32 * 14)
    Spike(32 * 147,32 * (16 - i))

for i in range(11):
    Spike(32 * 139,32 * (16 - i))

    
for i in range(250):
    Spike(32 * (12 + i),32 * 16)

for i in range(30):
    Spike(32 * (12 + i),32 * 14)
    Spike(32 * (12 + i),32 * 10)
for i in range(33):
    Spike(32 * (94 + i),32 * 6)

for i in range(40):
    Spike(32 * (89 + i),32 * 4)
    Spike(32 * (85 + i),32 * 12)

for n in range(3,9):
    for i in range(n):
        for j in range(2 * i + 1):
            Spike(32 * (159 - i + j + n * 15 - 45),32 * (16 - n + i))
        
for i in range(15):
    Spike(32 * (12 + i),32 * 4)
    Spike(32 * (26 + i),32 * 2)
    if i != 1:
        Spike(32 * 59,32 * (11 - i))
    
Spike(32 * 26,32 * 3)
for i in range(16):
    Spike(32 * (42 + i),32 * 4)

for i in range(11):
    Spike(32 * (47 + i),32 * 6)
for i in range(12):
    Spike(32 * (47 + i),32 * 8)
    Spike(32 * (47 + i),32 * 11)

for i in range(10):
    Spike(32 * (59 + i),32 * 11)

for i in range(30):
    Spike(32 * (43 - i),32 * 12)
    Spike(32 * (43 - i),32 * 8)
    for j in range(5):
        check = False
        if i % 2 == 0:
            if (i // 2) % 2 == 0:
                if j == 0 or j == 4:
                    check = True
            else:
                if j == 2:
                    check = True
        if check:
            Spike(32 * (94 + i),32 * (7 + j))

for i in range(2):
    Spike(32 * 15,32 * (6 + i))
    Spike(32 * 18,32 * (6 + i))
    Spike(32 * 21,32 * (6 + i))
    Spike(32 * 24,32 * (6 + i))

Spike(32 * 62,32 * 4)
Spike(32 * 65,32 * 8)

for i in range(3):
    Spike(32 * (41 + i),32 * 2)

    Spike(32 * (53 + i),32 * (15 - i))
    Spike(32 * (57 + i),32 * (14 - i))
    Spike(32 * (60 + i),32 * (15 - i))

    Spike(32 * 120,32 * (15 - i))


for i in range(2):
    Spike(32 * 43,32 * (4 - i))
    Spike(32 * 43,32 * (7 - i))

#=======Spiny=======

#=======Spring=======
Spring(32 * 137, 32 * 13)
Spring(32 * 144, 32 * 13)
#=======Things(Pswitch)=======

#=======Thowmp=======

#=======와리가리=======

#=======Yoshi=======

#=======Galumba=======

